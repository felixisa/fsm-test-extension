#lang racket
(require test-engine/racket-tests)

; A test-word is a list of (listof state) and a word

; dupl-loops: (listof test-word) natnum -> (listof test-word)
; Purpose: To detect loops in each test-word and exploit them n times for testing
(define (dupl-loops lotw n)

  ; duplicate: (listof X) natnum -> (listof X)
  ; Purpose: To duplicate the contents of the given list n times
  (define (duplicate L n)
    (flatten (if (zero? n) '() (cons L (duplicate L (sub1 n))))))

  ; dupl-helper: test-word -> test-word
  ; Purpose: To detect loops in a single given test word and exploit them n times
  (define (dupl-helper tw)
    
    (define new-path empty) 
    
    (define (push val)
      (if (list? val) (set! new-path (append val new-path))
          (set! new-path (cons val new-path))))
    
    ; dupl-helper2: (listof state) word (listof state) word -> test-word
    ; Purpose: To detect loops in a single given test word and exploit them n times
    (define (dupl-helper2 old-path old-word)
     ; (begin (displayln "old") (println old-path) (displayln "new") (println new-path) (newline))
      (cond [(empty? old-path) (list (reverse new-path) old-word)] ; if old path is empty, return new path and word (word not implemented yet)
            [(not (false? (member (first old-path) new-path))) ; if state has been encountered
             (begin
               (push (first old-path)) ; push first letter of old path
               (push (duplicate (cons (first new-path) (takef (rest new-path) (Î» (i) (not (eq? i (first new-path)))))) (sub1 n))) ; push appropriate duplicated part 
               (dupl-helper2 (rest old-path) old-word))]
            [else (begin
                    (push (first old-path))
                    (dupl-helper2 (rest old-path) old-word))]))

    (dupl-helper2 (car tw) (cadr tw)))

  (map dupl-helper lotw))

(check-expect (dupl-loops '(((A B C B D A) (1 2 3 4 5))) 3) '(((A B C B C B C B D A B C B C B C B D A B C B C B C B D A) (1 2 3 4 5))))
;(check-expect (dupl-loops '(((A B C A D E A) (1 2 3 4 5 6))) 2) '(((A B C A B C A D E A D E A B C A B C A D E A D E A) (1 2 3 4 5 6))))
(check-expect (dupl-loops '(((S A B B A C) (a b b a c))) 3) '(((S A B B B B A B B B B A B B B B A C) (a b b a c))))

(dupl-loops '(((A B C A D B A) (1 2 3 4 5 6))) 2)

(test)